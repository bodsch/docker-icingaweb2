#!/bin/bash

set -e

GITHUB_USER=${GITHUB_USER:-bodsch}
WORK_DIR=$(dirname $(readlink --canonicalize "${0}"))
JSON_DIR=$(dirname $(readlink --canonicalize "${0%/*}"))/build
TEMP_DIR=$(mktemp --directory)

pushd ${TEMP_DIR}

echo "current directory: ${PWD}"

default_modules() {

  if [[ -f ${JSON_DIR}/modules.json ]]
  then
    MODULE_JSON=$(cat ${JSON_DIR}/modules.json)
  else
    MODULE_JSON='{
      "Icinga/icingaweb2-module-director": {},
      "Icinga/icingaweb2-module-vsphere": {
        "enable": false
      },
      "Icinga/icingaweb2-module-vspheredb": {},
      "Icinga/icingaweb2-module-graphite": {},
      "Icinga/icingaweb2-module-generictts": {},
      "Icinga/icingaweb2-module-businessprocess": {},
      "Icinga/icingaweb2-module-elasticsearch": {},
      "Icinga/icingaweb2-module-cube": {},
      "Icinga/icingaweb2-module-aws": {},
      "Icinga/icingaweb2-module-fileshipper": {},
      "Icinga/icingaweb2-module-toplevelview": {},
      "Mikesch-mp/icingaweb2-module-grafana.git": {},
      "Mikesch-mp/icingaweb2-module-globe": {},
      "Thomas-Gelf/icingaweb2-module-reporting": {},
      "nbuchwitz/icingaweb2-module-map": {},
      "morgajel/icingaweb2-module-boxydash": {}
    }'
  fi

}

# check github rate limits
# we consume for each REST API call a credit
#
github_ratelimit() {

  local -n VAR=$1

  curl_opts=
  [[ -z ${GITHUB_OAUTH_TOKEN} ]] || curl_opts="--user ${GITHUB_USER}:${GITHUB_OAUTH_TOKEN}"

  remaining=$(curl \
    --silent \
    --include \
    ${curl_opts} \
    https://api.github.com/users/bodsch | grep "X-RateLimit-Remaining: " | awk -F 'X-RateLimit-Remaining: ' '{print $2}')

  echo "RateLimit Remaining: ${remaining}"

  VAR=${remaining}
}


check_downloads() {

  cd cache

  for file in $(ls -1 github_*.json)
  do
    published_at=$(jq --raw-output ".published_at" ${file})
    project_name=$(jq --raw-output ".project_name" ${file})
    project_maintainer=$(jq --raw-output ".project_maintainer" ${file})
    author=$(jq --raw-output ".author.login" ${file})
    version=$(jq --raw-output ".tag_name" ${file})
    url=$(jq --raw-output ".tarball_url" ${file})
    enable=$(jq --raw-output ".enable" ${file})
    use_git=$(jq --raw-output ".use_git" ${file})
    destination=$(jq --raw-output ".destination" ${file})

    if [[ ${published_at} != null ]]
    then
      if [[ -e /etc/alpine-release ]]
      then
        release_date=$(date -d @$(date -u -D %Y-%m-%dT%TZ -d "${published_at}" +%s) +%d.%m.%Y)
      else
        release_date=$(date -d ${published_at} +%d.%m.%Y)
      fi

      release="released at ${release_date}"

      if [[ "${use_git}" == "true" ]]
      then
        release="${release} but use git"
      fi

    else
      version=""
      release="never released, use git"
    fi

    echo " - ${project_maintainer} :: ${project_name} ${version} (${release})"
  done

  cd ..
}


download_modules() {

  echo " - get latest published versions"

  [[ -d cache ]] || mkdir -p cache

  #current_time=$(date +%s)

  for k in $(echo ${MODULE_JSON} | jq --raw-output '. | to_entries | .[] | .key')
  do
    enable="$(echo "${MODULE_JSON}" | jq --raw-output ".[\"$k\"].enable")"
    ignore=$(echo "${MODULE_JSON}" | jq --raw-output ".[\"$k\"].ignore")
    use_git="$(echo "${MODULE_JSON}" | jq --raw-output ".[\"$k\"].use_git")"
    tarball_url=$(echo "${MODULE_JSON}" | jq --raw-output ".[\"$k\"].tarball_url")
    destination=$(echo "${MODULE_JSON}" | jq --raw-output ".[\"$k\"].destination")

    [[ "${enable}" == null ]] && enable=true
    [[ "${ignore}" == null ]] && ignore=false
    [[ "${use_git}" == null ]] && use_git=false
    [[ "${tarball_url}" == null ]] && tarball_url=''
    [[ "${destination}" == null ]] && destination=

    if [[ ${ignore} == true ]]
    then
      continue
    fi

    project="$(echo "${k}" | sed -e 's|\.git||g' -e 's/https\?:\/\///' -e 's|github.com/||g')"
    project_maintainer="$(echo "${project}" | cut -d "/" -f1)"
    project_name="$(echo "${project}" | cut -d "/" -f2 | sed -e 's|icingaweb2-module-||g')"
    outfile=$(echo "${project}" | tr [:upper:] [:lower:] | sed -e 's|/|_|g')

    #if [[ -f "cache/github_${outfile}.json" ]]
    #then
    #  file_time=$(stat -c '%Y' "/build/cache/github_${outfile}.json")
    #
    #  echo "${file_time}"
    #
    #  if (( file_time < ( current_time - ( 60 * 60 * 24 * 10 ) ) )); then
    #    echo "cached file for github_${outfile}.json is older than 10 days"
    #  else
    #    echo "use cached file"
    #    cp -v cache/github_${outfile}.json /tmp/
    #  fi
    #else
    #  echo "no cache"
    #fi

    curl_opts=
    [[ -z ${GITHUB_OAUTH_TOKEN} ]] || curl_opts="--user ${GITHUB_USER}:${GITHUB_OAUTH_TOKEN}"

    # download project releated release file from github
    #
    # when ${http_code} == 404 then this module is not released yet!
    #
    if [[ ! -f "cache/github_${outfile}.json" ]]
    then
      echo "https://api.github.com/repos/${project}/releases/latest"

      code=$(curl \
        ${curl_opts} \
        --silent \
        --header 'Accept: application/vnd.github.v3.full+json' \
        --write-out "%{http_code}\n" \
        --out "cache/github_${outfile}.json" \
        https://api.github.com/repos/${project}/releases/latest)
    fi
set -x
    # remove some unneeded parts
    # and add our things
    #
    if [[ -f "cache/github_${outfile}.json" ]] && [[ $(stat -c %s cache/github_${outfile}.json) -gt 0 ]]
    then
      cat "cache/github_${outfile}.json" | \
        jq 'del(.author) | del(.body_html) | del(.body_text) | del(.body) | del(.assets)' | \
        jq ". |= .+ {\"enable\": \"${enable}\", \"use_git\": \"${use_git}\", \"project_maintainer\": \"${project_maintainer}\", \"project_name\": \"${project_name}\" }" > cache/github_${outfile}.json_TMP

      if [[ ! -z ${destination} ]]
      then
        cat "cache/github_${outfile}.json_TMP" | \
          jq ". |= .+ {\"destination\": \"${destination}\" }" > cache/github_${outfile}.json_TMP2

        mv cache/github_${outfile}.json_TMP2 cache/github_${outfile}.json_TMP
      fi
set +x
      mv cache/github_${outfile}.json_TMP cache/github_${outfile}.json
    fi

    cat cache/github_${outfile}.json
  done

  check_downloads

  tar -czf cache.tgz cache
}


github_ratelimit remaining

if [[ "${remaining/$'\r'/}" -gt 20 ]]
then
  default_modules
  download_modules

  if [[ -f cache.tgz ]]
  then
    cp -v cache.tgz ${JSON_DIR}/
  fi
else
  echo "sorry, API rate limit fot github exceeded. (only ${remaining} left)"
fi

popd

rm -rfv ${TEMP_DIR}
